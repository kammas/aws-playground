AWSTemplateFormatVersion: 2010-09-09
Description:  AWS Playground (VPC, Internet Gateway, VPC Gateway Attachment, RouteTable, )
Metadata:
  LICENSE: Apache License Version 2.0
Mappings:
  Network:
    Settings:
      VpcCidr1: '10.16.0.0/17'
      SubnetPrivA1: '10.16.0.0/19'
      SubnetPrivB1: '10.16.32.0/19'
      SubnetPubA1: '10.16.64.0/19'
      SubnetPubB1: '10.16.96.0/19'
      VpcCidr2: '10.16.128.0/17'
      SubnetPrivA2: '10.16.128.0/19'
      SubnetPrivB2: '10.16.160.0/19'
      SubnetPubA2: '10.16.192.0/19'
      SubnetPubB2: '10.16.224.0/19'
      VpcCidrOnPrem1: '192.168.8.0/21'
      SubnetPubOnPrem1: '192.168.12.0/24'
      SubnetPrivOnPrem1: '192.168.10.0/24'
      SubnetPrivOnPrem2: '192.168.11.0/24'
Parameters:
  LatestAmiId:
    Description: AMI for Bastion Host (default is latest AmaLinux2)
    Type: 'AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>'
    Default: '/aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-gp2'      
  WebAsgMax:
    AllowedPattern: ^([0-0]?[0-9]|10)$
    ConstraintDescription: Must be a number between 1 and 30.
    Default: 4
    Description: Specifies the maximum number of EC2 instances in the Web Autoscaling Group.
    Type: String
  WebAsgMin:
    AllowedPattern: ^([0-0]?[0-9]|10)$
    ConstraintDescription: Must be a number between 0 and 10.
    Default: 0
    Description: Specifies the minimum number of EC2 instances in the Web Autoscaling Group.
    Type: String
  WebAsgDesired:
    AllowedPattern: ^([0-0]?[0-9]|10)$
    ConstraintDescription: Must be a number between 0 and 10.
    Default: 2
    Description: Specifies the Desired of EC2 instances in the Web Autoscaling Group.
    Type: String 
  route53DomainName: 
    Type: String
    Description: Apex domain name.
    Default: mydomain.cmcloudlab972.info
  route53HostedZoneId: 
    Type: String
    Default: Z07227912EAFGFRJX5E79
    Description: Hosted ZoneId.    
Resources:
  # VPC1 Resources
  awsVPC1:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !FindInMap [ Network, Settings, VpcCidr1 ]
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: awsVPC1
  awsInternetGateway1:
    Type: 'AWS::EC2::InternetGateway'
    Properties:
      Tags:
      - Key: Name
        Value: awsIGW1
  awsInternetGatewayAttachment1:
    Type: 'AWS::EC2::VPCGatewayAttachment'
    Properties:
      VpcId: !Ref awsVPC1
      InternetGatewayId: !Ref awsInternetGateway1
  awsPublicRouteTable1: 
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref awsVPC1
      Tags:
      - Key: Name
        Value: awsPublicRT1
  awsPrivateRouteTable1: 
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref awsVPC1
      Tags:
      - Key: Name
        Value: awsPrivateRT1
  awsDefaultV4Route1: 
    Type: 'AWS::EC2::Route'
    DependsOn: awsInternetGatewayAttachment1
    Properties:
      RouteTableId:
        Ref: awsPublicRouteTable1
      DestinationCidrBlock: '0.0.0.0/0'
      GatewayId:
        Ref: awsInternetGateway1
  awsPublicSubnetA1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref awsVPC1
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      CidrBlock: !FindInMap [ Network, Settings, SubnetPubA1 ]
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: aws-publicA1
  awsPublicSubnetB1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref awsVPC1
      AvailabilityZone: !Select [ 1, !GetAZs '' ]
      CidrBlock: !FindInMap [ Network, Settings, SubnetPubB1 ]
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: aws-publicB1
  awsPrivateSubnetA1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref awsVPC1
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      CidrBlock: !FindInMap [ Network, Settings, SubnetPrivA1 ]
      Tags:
        - Key: Name
          Value: aws-privateA1
  awsPrivateSubnetB1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref awsVPC1
      AvailabilityZone: !Select [ 1, !GetAZs '' ]
      CidrBlock: !FindInMap [ Network, Settings, SubnetPrivB1 ]
      Tags:
        - Key: Name
          Value: aws-privateB1
  awsPublicARouteTableAssociation1:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref awsPublicSubnetA1
      RouteTableId:
        Ref: awsPublicRouteTable1
  awsPublicBRouteTableAssociation1:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref awsPublicSubnetB1
      RouteTableId:
        Ref: awsPublicRouteTable1
  awsPrivateARouteTableAssociation1:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref awsPrivateSubnetA1
      RouteTableId:
        Ref: awsPrivateRouteTable1
  awsPrivateBRouteTableAssociation1:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref awsPrivateSubnetB1
      RouteTableId:
        Ref: awsPrivateRouteTable1
  TGWDefaultRoute:
    Type: AWS::EC2::Route
    DependsOn: "TGWATT"
    Properties:
      TransitGatewayId: !Ref TGW
      RouteTableId: !Ref awsPrivateRouteTable1
      DestinationCidrBlock: "0.0.0.0/0"
  TGW:
    Type: "AWS::EC2::TransitGateway"
    Properties:
      AmazonSideAsn: 64512
      Description: "awsVPC1 TGW"
      DefaultRouteTableAssociation: "enable"
      DnsSupport: "enable"
      VpnEcmpSupport: "enable"
  TGWATT:
    Type: AWS::EC2::TransitGatewayAttachment
    Properties: 
      SubnetIds: 
        - !Ref awsPrivateSubnetA1
        - !Ref awsPrivateSubnetB1
      Tags: 
        - Key: Name
          Value: TGWATTACHMENT
      TransitGatewayId: !Ref TGW
      VpcId: !Ref awsVPC1      
  EC2A1:
    Type: AWS::EC2::Instance
    DependsOn: 
      - ssminterfaceendpoint
      - ssmec2messagesinterfaceendpoint
      - ssmmessagesinterfaceendpoint
    Properties:
      InstanceType: "t2.micro"
      ImageId: !Ref LatestAmiId
      IamInstanceProfile: !Ref EC2InstanceProfile1
      SubnetId: !Ref awsPrivateSubnetA1
      SecurityGroupIds: 
        - !Ref InstanceSG
      Tags:
        - Key: Name
          Value: PRIVA1
  EC2B1:
    Type: AWS::EC2::Instance
    DependsOn: 
      - ssminterfaceendpoint
      - ssmec2messagesinterfaceendpoint
      - ssmmessagesinterfaceendpoint
    Properties:
      InstanceType: "t2.micro"
      ImageId: !Ref LatestAmiId
      IamInstanceProfile: !Ref EC2InstanceProfile1
      SubnetId: !Ref awsPrivateSubnetB1
      SecurityGroupIds: 
        - !Ref InstanceSG
      Tags:
        - Key: Name
          Value: PRIVB1
  EC2Role1:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
              - ec2.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Path: /
      Policies:
        - PolicyName: root
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action: 
                  - 'ssm:DescribeAssociation'
                  - 'ssm:GetDeployablePatchSnapshotForInstance'
                  - 'ssm:GetDocument'
                  - 'ssm:DescribeDocument'
                  - 'ssm:GetManifest'
                  - 'ssm:GetParameter'
                  - 'ssm:GetParameters'
                  - 'ssm:ListAssociations'
                  - 'ssm:ListInstanceAssociations'
                  - 'ssm:PutInventory'
                  - 'ssm:PutComplianceItems'
                  - 'ssm:PutConfigurePackageResult'
                  - 'ssm:UpdateAssociationStatus'
                  - 'ssm:UpdateInstanceAssociationStatus'
                  - 'ssm:UpdateInstanceInformation'
                Resource: '*'
              - Effect: Allow
                Action:
                  - 'ssmmessages:CreateControlChannel'
                  - 'ssmmessages:CreateDataChannel'
                  - 'ssmmessages:OpenControlChannel'
                  - 'ssmmessages:OpenDataChannel' 
                Resource: '*'
              - Effect: Allow
                Action: 
                  - 'ec2messages:AcknowledgeMessage'
                  - 'ec2messages:DeleteMessage'
                  - 'ec2messages:FailMessage'
                  - 'ec2messages:GetEndpoint'
                  - 'ec2messages:GetMessages'
                  - 'ec2messages:SendReply'
                Resource: '*'
              - Effect: Allow
                Action:
                  - 's3:*'
                Resource: '*'
              - Effect: Allow
                Action:
                  - 'sns:*'
                Resource: '*'
  EC2InstanceProfile1:
    Type: 'AWS::IAM::InstanceProfile'
    Properties:
      Path: /
      Roles:
        - !Ref EC2Role1
  InstanceSG:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      VpcId: !Ref awsVPC1
      GroupDescription: Default awsVPC1 SG
      SecurityGroupIngress: 
        - Description: 'Allow SSH IPv4 IN'
          IpProtocol: tcp
          FromPort: '22'
          ToPort: '22'
          CidrIp: '0.0.0.0/0'
        - Description: 'Allow ALL from ONPREM Networks'
          IpProtocol: "-1"
          CidrIp: !FindInMap [ Network, Settings, VpcCidrOnPrem1 ]
  InstanceSGSelfReferenceRule:
    Type: "AWS::EC2::SecurityGroupIngress"
    Properties:
      GroupId: !Ref InstanceSG
      IpProtocol: '-1'
      SourceSecurityGroupId: !Ref InstanceSG
  ssminterfaceendpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      VpcEndpointType: "Interface"
      PrivateDnsEnabled: "True"
      SubnetIds:
        - !Ref awsPrivateSubnetA1
        - !Ref awsPrivateSubnetB1
      SecurityGroupIds:
        - !Ref InstanceSG
      ServiceName: !Sub com.amazonaws.${AWS::Region}.ssm
      VpcId: !Ref awsVPC1
  ssmec2messagesinterfaceendpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      VpcEndpointType: "Interface"
      PrivateDnsEnabled: "True"
      SubnetIds:
        - !Ref awsPrivateSubnetA1
        - !Ref awsPrivateSubnetB1
      SecurityGroupIds:
        - !Ref InstanceSG
      ServiceName: !Sub com.amazonaws.${AWS::Region}.ec2messages
      VpcId: !Ref awsVPC1
  ssmmessagesinterfaceendpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      VpcEndpointType: "Interface"
      PrivateDnsEnabled: "True"
      SubnetIds:
        - !Ref awsPrivateSubnetA1
        - !Ref awsPrivateSubnetB1
      SecurityGroupIds:
        - !Ref InstanceSG
      ServiceName: !Sub com.amazonaws.${AWS::Region}.ssmmessages
      VpcId: !Ref awsVPC1
  SGWEB:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      VpcId: !Ref awsVPC1
      GroupDescription: Control access to WEB Instance(s)
      SecurityGroupIngress: 
        - Description: 'Allow HTTP IPv4 IN'
          IpProtocol: tcp
          FromPort: '80'
          ToPort: '80'
          CidrIp: '0.0.0.0/0'
        - Description: 'Allow WWW IN FROM ALB'
          IpProtocol: tcp
          FromPort: '80'
          ToPort: '80'
          SourceSecurityGroupId: !Ref SGLoadBalancer
  SGLoadBalancer:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      VpcId: !Ref awsVPC1
      GroupDescription: Control access to Load Balancer
      SecurityGroupIngress: 
        - Description: 'Allow HTTP IPv4 IN'
          IpProtocol: tcp
          FromPort: '80'
          ToPort: '80'
          CidrIp: '0.0.0.0/0'
  EC2Role3:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
              - ec2.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Path: /
      ManagedPolicyArns: 
        - arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore
  WEBInstanceProfile:
    Type: 'AWS::IAM::InstanceProfile'
    Properties:
      Path: /
      Roles:
        - !Ref EC2Role3
  WEBLaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    Properties: 
      LaunchTemplateData: 
        InstanceType: "t2.micro"
        CreditSpecification:
          CpuCredits: unlimited
        ImageId: !Ref LatestAmiId
        IamInstanceProfile: 
          Name: !Ref WEBInstanceProfile
        SecurityGroupIds: 
          - !Ref SGWEB
        UserData:
          Fn::Base64: !Sub |
            #!/bin/bash -xe

            # STEP 1 - Updates
            yum -y update
            
            # STEP 2 - Begin Configuration
            yum -y install httpd wget cowsay curl python3 pip3
            amazon-linux-extras install -y php7.2
            amazon-linux-extras install epel -y
            yum install stress -y
            pip3 install random-cat
            systemctl enable httpd
            systemctl start httpd

            # STEP 2 - Custom Random Web Page
            bgcolor=$(printf "%02x%02x%02x\n" $((RANDOM%256)) $((RANDOM%256)) $((RANDOM%256)))
            instanceId=$(curl http://169.254.169.254/latest/meta-data/instance-id)
            wget -O /var/www/html/random.jpg "https://picsum.photos/200/300"
            echo "<html><head></head><body style=\"background-color:#$bgcolor;\">" >> /var/www/html/index.html
            echo "<center><h1>EC2: $instanceId</h1></center><br>" >> /var/www/html/index.html
            echo "<center><img src=\"random.jpg\"></center>" >> /var/www/html/index.html
            echo "</body></html>" >> /var/www/html/index.html

            # Step 4 - permissions 
            usermod -a -G apache ec2-user   
            chown -R ec2-user:apache /var/www
            chmod 2775 /var/www
            find /var/www -type d -exec chmod 2775 {} \;
            find /var/www -type f -exec chmod 0664 {} \;

            # STEP 5 COWSAY
            echo "#!/bin/sh" > /etc/update-motd.d/40-cow
            echo 'cowsay "Amazon Linux 2 AMI - RandomImage"' > /etc/update-motd.d/40-cow
            chmod 755 /etc/update-motd.d/40-cow
            rm /etc/update-motd.d/30-banner
            update-motd
  ASG: 
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties: 
      VPCZoneIdentifier:
        - !Ref awsPublicSubnetA1
        - !Ref awsPublicSubnetB1
      LaunchTemplate:
        LaunchTemplateId: !Ref WEBLaunchTemplate
        Version: "1"
      MaxSize: !Ref WebAsgMax
      MinSize: !Ref WebAsgMin
      DesiredCapacity: !Ref WebAsgDesired
      Tags:
        - Key: "Name"
          Value: "ASGEC21"
          PropagateAtLaunch: true
      HealthCheckType: ELB
      HealthCheckGracePeriod: 300
      TargetGroupARNs:
        - !Ref ALBTG
  ALB:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties: 
      IpAddressType: "ipv4"
      Scheme: "internet-facing"
      SecurityGroups: 
        - !Ref SGLoadBalancer
      Subnets: 
        - !Ref awsPublicSubnetA1
        - !Ref awsPublicSubnetB1
      Tags: 
        - Key: Name
          Value: !Join [ '', [ 'ALB-', !Ref 'AWS::StackName' ] ]
      Type: "application"
  ALBListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref ALBTG
      LoadBalancerArn: !Ref ALB
      Port: 80
      Protocol: HTTP
  ALBTG:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: 30
      HealthCheckPath: /index.html
      HealthCheckTimeoutSeconds: 5
      Port: 80
      Protocol: HTTP
      UnhealthyThresholdCount: 5
      VpcId: !Ref awsVPC1
      TargetGroupAttributes:
        - Key: stickiness.enabled 
          Value: false
  PrivateBucket1:
    Type: AWS::S3::Bucket
  PublicBucket1:
    Type: AWS::S3::Bucket
  CopyPublicBucketCustomObject:
    Type: "Custom::S3Objects"
    Properties:
      ServiceToken: !GetAtt CopyS3ObjectsFunction.Arn
      SourceBucket: "cl-shared-private-s3-bucket"
      SourcePrefix: "PublicBucket1"
      Bucket: !Ref PublicBucket1
  CopyPrivateBucketCustomObject:
    Type: "Custom::S3Objects"
    Properties:
      ServiceToken: !GetAtt CopyS3ObjectsFunction.Arn
      SourceBucket: "cl-shared-private-s3-bucket"
      SourcePrefix: "PrivateBucket1"
      Bucket: !Ref PrivateBucket1
  S3CopyRole:
    Type: AWS::IAM::Role
    Properties:
      Path: /
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          -
            Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        -
          PolicyName: S3Access
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              -
                Sid: AllowLogging
                Effect: Allow
                Action:
                  - "logs:CreateLogGroup"
                  - "logs:CreateLogStream"
                  - "logs:PutLogEvents"
                Resource: "*"
              -
                Sid: ReadFromLCBucket
                Effect: Allow
                Action:
                  - "s3:ListBucket"
                  - "s3:GetObject"
                Resource:
                  - !Sub "arn:aws:s3:::cl-shared-private-s3-bucket"
                  - !Sub "arn:aws:s3:::cl-shared-private-s3-bucket/*"
              -
                Sid: WriteToStudentBuckets
                Effect: Allow
                Action:
                  - "s3:ListBucket"
                  - "s3:GetObject"
                  - "s3:PutObject"
                  - "s3:PutObjectAcl"
                  - "s3:PutObjectVersionAcl"
                  - "s3:DeleteObject"
                  - "s3:DeleteObjectVersion"
                  - "s3:CopyObject"
                Resource:
                  - !Sub "arn:aws:s3:::${PrivateBucket1}"
                  - !Sub "arn:aws:s3:::${PrivateBucket1}/*"
                  - !Sub "arn:aws:s3:::${PublicBucket1}"
                  - !Sub "arn:aws:s3:::${PublicBucket1}/*"
  CopyS3ObjectsFunction:
    Type: AWS::Lambda::Function
    Properties:
      Description: Copies objects into buckets
      Handler: index.handler
      Runtime: python2.7
      Role: !GetAtt S3CopyRole.Arn
      Timeout: 120
      Code:
        ZipFile: |
          import os 
          import json
          import cfnresponse
          import boto3
          import logging

          from botocore.exceptions import ClientError
          client = boto3.client('s3')
          logger = logging.getLogger()
          logger.setLevel(logging.INFO)

          def handler(event, context):
            logger.info("Received event: %s" % json.dumps(event))
            source_bucket = event['ResourceProperties']['SourceBucket']
            source_prefix = event['ResourceProperties'].get('SourcePrefix') or ''
            bucket = event['ResourceProperties']['Bucket']
            prefix = event['ResourceProperties'].get('Prefix') or ''

            result = cfnresponse.SUCCESS

            try:
              if event['RequestType'] == 'Create' or event['RequestType'] == 'Update':
                result = copy_objects(source_bucket, source_prefix, bucket, prefix)
              elif event['RequestType'] == 'Delete':
                result = delete_objects(bucket, prefix)
            except ClientError as e:
              logger.error('Error: %s', e)
              result = cfnresponse.FAILED

            cfnresponse.send(event, context, result, {})

          def copy_objects(source_bucket, source_prefix, bucket, prefix):
            paginator = client.get_paginator('list_objects_v2')
            page_iterator = paginator.paginate(Bucket=source_bucket, Prefix=source_prefix)
            for key in {x['Key'] for page in page_iterator for x in page['Contents']}:
              dest_key = os.path.join(prefix, os.path.relpath(key, source_prefix))
              if not key.endswith('/'):
                print 'copy {} to {}'.format(key, dest_key)
                client.copy_object(CopySource={'Bucket': source_bucket, 'Key': key}, Bucket=bucket, Key = dest_key)
            return cfnresponse.SUCCESS

          def delete_objects(bucket, prefix):
            paginator = client.get_paginator('list_objects_v2')
            page_iterator = paginator.paginate(Bucket=bucket, Prefix=prefix)
            objects = [{'Key': x['Key']} for page in page_iterator for x in page['Contents']]
            client.delete_objects(Bucket=bucket, Delete={'Objects': objects})
            return cfnresponse.SUCCESS                
  # VPC2 Resources
  awsVPC2:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !FindInMap [ Network, Settings, VpcCidr2 ]
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: awsVPC2
  awsInternetGateway2:
    Type: 'AWS::EC2::InternetGateway'
    Properties:
      Tags:
      - Key: Name
        Value: awsIGW2
  awsInternetGatewayAttachment2:
    Type: 'AWS::EC2::VPCGatewayAttachment'
    Properties:
      VpcId: !Ref awsVPC2
      InternetGatewayId: !Ref awsInternetGateway2
  awsPublicRouteTable2: 
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref awsVPC2
      Tags:
      - Key: Name
        Value: awsPublicRT2
  awsPrivateRouteTable2: 
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref awsVPC2
      Tags:
      - Key: Name
        Value: awsPrivateRT2
  awsDefaultV4Route2: 
    Type: 'AWS::EC2::Route'
    DependsOn: awsInternetGatewayAttachment2
    Properties:
      RouteTableId:
        Ref: awsPublicRouteTable2
      DestinationCidrBlock: '0.0.0.0/0'
      GatewayId:
        Ref: awsInternetGateway2
  awsPublicSubnetA2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref awsVPC2
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      CidrBlock: !FindInMap [ Network, Settings, SubnetPubA2 ]
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: aws-publicA2
  awsPublicSubnetB2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref awsVPC2
      AvailabilityZone: !Select [ 1, !GetAZs '' ]
      CidrBlock: !FindInMap [ Network, Settings, SubnetPubB2 ]
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: aws-publicB2
  awsPrivateSubnetA2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref awsVPC2
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      CidrBlock: !FindInMap [ Network, Settings, SubnetPrivA2 ]
      Tags:
        - Key: Name
          Value: aws-privateA2
  awsPrivateSubnetB2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref awsVPC2
      AvailabilityZone: !Select [ 1, !GetAZs '' ]
      CidrBlock: !FindInMap [ Network, Settings, SubnetPrivB2 ]
      Tags:
        - Key: Name
          Value: aws-privateB2
  awsPublicARouteTableAssociation2:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref awsPublicSubnetA2
      RouteTableId:
        Ref: awsPublicRouteTable2
  awsPublicBRouteTableAssociation2:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref awsPublicSubnetB2
      RouteTableId:
        Ref: awsPublicRouteTable2
  awsPrivateARouteTableAssociation2:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref awsPrivateSubnetA2
      RouteTableId:
        Ref: awsPrivateRouteTable2
  awsPrivateBRouteTableAssociation2:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref awsPrivateSubnetB2
      RouteTableId:
        Ref: awsPrivateRouteTable2
  vpcpeer12:
    Type: AWS::EC2::VPCPeeringConnection
    Properties: 
      PeerVpcId: !Ref awsVPC2
      Tags: 
        - Key: Name
          Value: VPCPeer12
      VpcId: !Ref awsVPC1
  awsVpcPeerRoute1:
    Type: AWS::EC2::Route
    DependsOn: vpcpeer12
    Properties:
        RouteTableId:
          Ref: awsPrivateRouteTable1
        DestinationCidrBlock: !FindInMap [ Network, Settings, VpcCidr2 ]
        VpcPeeringConnectionId:
          Ref: vpcpeer12
  awsVpcPeerRoute2:
    Type: AWS::EC2::Route
    DependsOn: vpcpeer12
    Properties:
        RouteTableId:
          Ref: awsPrivateRouteTable2
        DestinationCidrBlock: !FindInMap [ Network, Settings, VpcCidr1 ]
        VpcPeeringConnectionId:
          Ref: vpcpeer12
  EC2Role2:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
              - ec2.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Path: /
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/CloudWatchAgentServerPolicy"
        - "arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore"
        - "arn:aws:iam::aws:policy/AmazonS3ReadOnlyAccess"
        - "arn:aws:iam::aws:policy/AmazonEC2ReadOnlyAccess"
  EC2InstanceProfile2:
    Type: 'AWS::IAM::InstanceProfile'
    Properties:
      Path: /
      Roles:
        - !Ref EC2Role2
  EC2A2:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: "t2.micro"
      ImageId: !Ref LatestAmiId
      IamInstanceProfile: !Ref EC2InstanceProfile2
      SubnetId: !Ref awsPublicSubnetA2
      SecurityGroupIds: 
        - !Ref WebInstanceSecurityGroup2
      Tags:
        - Key: Name
          Value: WEBA2
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash -xe
          yum -y update
          yum -y install httpd wget
          wget https://pk-sharedmedia.s3.amazonaws.com/index.html -P /var/www/html
          wget https://pk-sharedmedia.s3.amazonaws.com/sample1.jpg -P /var/www/html
          usermod -a -G apache ec2-user   
          chown -R ec2-user:apache /var/www
          chmod 2775 /var/www
          find /var/www -type d -exec chmod 2775 {} \;
          find /var/www -type f -exec chmod 0664 {} \;
          systemctl enable httpd
          systemctl start httpd
          rpm -Uvh https://s3.amazonaws.com/amazoncloudwatch-agent/amazon_linux/amd64/latest/amazon-cloudwatch-agent.rpm
          # CWAgent Fix
          mkdir -p /usr/share/collectd/
          touch /usr/share/collectd/types.db
          # CWAgent Fix End
          /opt/aws/amazon-cloudwatch-agent/bin/amazon-cloudwatch-agent-ctl -a fetch-config -m ec2 -c ssm:${CloudWatchLinuxConfig} -s
          /opt/aws/bin/cfn-signal -e $? --stack ${AWS::StackId} --resource EC2A2 --region ${AWS::Region}
  EC2B2:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: "t2.micro"
      ImageId: !Ref LatestAmiId
      IamInstanceProfile: !Ref EC2InstanceProfile2
      SubnetId: !Ref awsPublicSubnetB2
      SecurityGroupIds: 
        - !Ref WebInstanceSecurityGroup2
      Tags:
        - Key: Name
          Value: WEBB2
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash -xe
          yum -y update
          yum -y install httpd wget
          wget -O /var/www/html/index.html https://pk-sharedmedia.s3.amazonaws.com/error.html
          usermod -a -G apache ec2-user   
          chown -R ec2-user:apache /var/www
          chmod 2775 /var/www
          find /var/www -type d -exec chmod 2775 {} \;
          find /var/www -type f -exec chmod 0664 {} \;
          systemctl enable httpd
          systemctl start httpd
          rpm -Uvh https://s3.amazonaws.com/amazoncloudwatch-agent/amazon_linux/amd64/latest/amazon-cloudwatch-agent.rpm
          # CWAgent Fix
          mkdir -p /usr/share/collectd/
          touch /usr/share/collectd/types.db
          # CWAgent Fix End
          /opt/aws/amazon-cloudwatch-agent/bin/amazon-cloudwatch-agent-ctl -a fetch-config -m ec2 -c ssm:${CloudWatchLinuxConfig} -s
          /opt/aws/bin/cfn-signal -e $? --stack ${AWS::StackId} --resource EC2B2 --region ${AWS::Region}  
  WebInstanceSecurityGroup2:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      VpcId: !Ref awsVPC2
      GroupDescription: Enable SSH access via port 22 IPv4 & v6
      SecurityGroupIngress: 
        - Description: 'Allow SSH IPv4 IN'
          IpProtocol: tcp
          FromPort: '22'
          ToPort: '22'
          CidrIp: '0.0.0.0/0'
        - Description: 'Allow HTTP IPv4 IN'
          IpProtocol: tcp
          FromPort: '80'
          ToPort: '80'
          CidrIp: '0.0.0.0/0'
  WebInstanceSecurityGroup2SelfReferenceRule:
    Type: "AWS::EC2::SecurityGroupIngress"
    Properties:
      GroupId: !Ref WebInstanceSecurityGroup2
      IpProtocol: 'tcp'
      FromPort: '0'
      ToPort: '65535'
      SourceSecurityGroupId: !Ref WebInstanceSecurityGroup2
  CloudWatchLinuxConfig:
    Type: AWS::SSM::Parameter
    Properties:
      Type: String
      Tier: Standard
      Description: SSM Parameter for CloudWatchAgent Config
      Value: "{\n\t\"agent\": {\n\t\t\"metrics_collection_interval\": 60,\n\t\t\"run_as_user\": \"root\"\n\t},\n\t\"logs\": {\n\t\t\"logs_collected\": {\n\t\t\t\"files\": {\n\t\t\t\t\"collect_list\": [\n\t\t\t\t\t{\n\t\t\t\t\t\t\"file_path\": \"/var/log/secure\",\n\t\t\t\t\t\t\"log_group_name\": \"/var/log/secure\",\n\t\t\t\t\t\t\"log_stream_name\": \"{instance_id}\"\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\t\"file_path\": \"/var/log/httpd/access_log\",\n\t\t\t\t\t\t\"log_group_name\": \"/var/log/httpd/access_log\",\n\t\t\t\t\t\t\"log_stream_name\": \"{instance_id}\"\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\t\"file_path\": \"/var/log/httpd/error_log\",\n\t\t\t\t\t\t\"log_group_name\": \"/var/log/httpd/error_log\",\n\t\t\t\t\t\t\"log_stream_name\": \"{instance_id}\"\n\t\t\t\t\t}\n\t\t\t\t]\n\t\t\t}\n\t\t}\n\t},\n\t\"metrics\": {\n\t\t\"append_dimensions\": {\n\t\t\t\"AutoScalingGroupName\": \"${aws:AutoScalingGroupName}\",\n\t\t\t\"ImageId\": \"${aws:ImageId}\",\n\t\t\t\"InstanceId\": \"${aws:InstanceId}\",\n\t\t\t\"InstanceType\": \"${aws:InstanceType}\"\n\t\t},\n\t\t\"metrics_collected\": {\n\t\t\t\"collectd\": {\n\t\t\t\t\"metrics_aggregation_interval\": 60\n\t\t\t},\n\t\t\t\"cpu\": {\n\t\t\t\t\"measurement\": [\n\t\t\t\t\t\"cpu_usage_idle\",\n\t\t\t\t\t\"cpu_usage_iowait\",\n\t\t\t\t\t\"cpu_usage_user\",\n\t\t\t\t\t\"cpu_usage_system\"\n\t\t\t\t],\n\t\t\t\t\"metrics_collection_interval\": 60,\n\t\t\t\t\"resources\": [\n\t\t\t\t\t\"*\"\n\t\t\t\t],\n\t\t\t\t\"totalcpu\": false\n\t\t\t},\n\t\t\t\"disk\": {\n\t\t\t\t\"measurement\": [\n\t\t\t\t\t\"used_percent\",\n\t\t\t\t\t\"inodes_free\"\n\t\t\t\t],\n\t\t\t\t\"metrics_collection_interval\": 60,\n\t\t\t\t\"resources\": [\n\t\t\t\t\t\"*\"\n\t\t\t\t]\n\t\t\t},\n\t\t\t\"diskio\": {\n\t\t\t\t\"measurement\": [\n\t\t\t\t\t\"io_time\",\n\t\t\t\t\t\"write_bytes\",\n\t\t\t\t\t\"read_bytes\",\n\t\t\t\t\t\"writes\",\n\t\t\t\t\t\"reads\"\n\t\t\t\t],\n\t\t\t\t\"metrics_collection_interval\": 60,\n\t\t\t\t\"resources\": [\n\t\t\t\t\t\"*\"\n\t\t\t\t]\n\t\t\t},\n\t\t\t\"mem\": {\n\t\t\t\t\"measurement\": [\n\t\t\t\t\t\"mem_used_percent\"\n\t\t\t\t],\n\t\t\t\t\"metrics_collection_interval\": 60\n\t\t\t},\n\t\t\t\"netstat\": {\n\t\t\t\t\"measurement\": [\n\t\t\t\t\t\"tcp_established\",\n\t\t\t\t\t\"tcp_time_wait\"\n\t\t\t\t],\n\t\t\t\t\"metrics_collection_interval\": 60\n\t\t\t},\n\t\t\t\"statsd\": {\n\t\t\t\t\"metrics_aggregation_interval\": 60,\n\t\t\t\t\"metrics_collection_interval\": 10,\n\t\t\t\t\"service_address\": \":8125\"\n\t\t\t},\n\t\t\t\"swap\": {\n\t\t\t\t\"measurement\": [\n\t\t\t\t\t\"swap_used_percent\"\n\t\t\t\t],\n\t\t\t\t\"metrics_collection_interval\": 60\n\t\t\t}\n\t\t}\n\t}\n}"
  # route53HealthCheckPrimary:
  #   Type: AWS::Route53::HealthCheck
  #   DependsOn: EC2A2
  #   Properties: 
  #     HealthCheckConfig:
  #       FailureThreshold: 3
  #       FullyQualifiedDomainName: !Ref route53DomainName
  #       IPAddress: !GetAtt EC2A2.PublicIp
  #       Port: 80
  #       RequestInterval: 30
  #       ResourcePath: '/'
  #       Type: HTTP
  #     HealthCheckTags:
  #       - Key: 'Name'
  #         Value: 'health-check-primary'
  # route53HealthCheckSecondary:
  #   Type: AWS::Route53::HealthCheck
  #   DependsOn: EC2B2
  #   Properties: 
  #     HealthCheckConfig:
  #       FailureThreshold: 3
  #       FullyQualifiedDomainName: !Ref route53DomainName
  #       IPAddress: !GetAtt EC2B2.PublicIp
  #       Port: 80
  #       RequestInterval: 30
  #       ResourcePath: '/'
  #       Type: HTTP
  #     HealthCheckTags:
  #       - Key: 'Name'
  #         Value: 'health-check-secondary'
  # route53RecordPrimary:
  #   Type: AWS::Route53::RecordSet
  #   Properties: 
  #     Failover: 'PRIMARY'
  #     HealthCheckId: !Ref route53HealthCheckPrimary
  #     HostedZoneId: !Ref route53HostedZoneId
  #     Name: !Ref route53DomainName
  #     ResourceRecords: 
  #       - !GetAtt EC2A2.PublicIp
  #     SetIdentifier: 'recordset-primary'
  #     TTL: '60'
  #     Type: 'A'
  # route53RecordSecondary:
  #   Type: AWS::Route53::RecordSet
  #   Properties: 
  #     Failover: 'SECONDARY'
  #     HealthCheckId: !Ref route53HealthCheckSecondary
  #     HostedZoneId: !Ref route53HostedZoneId
  #     Name: !Ref route53DomainName
  #     ResourceRecords: 
  #       - !GetAtt EC2B2.PublicIp
  #     SetIdentifier: 'recordset-secondary'
  #     TTL: '60'
  #     Type: 'A'
# On Prem VPC
  OnPremVPC1:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock:  !FindInMap [ Network, Settings, VpcCidrOnPrem1 ]
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: ONPREM
  OnPremInternetGateway:
    Type: 'AWS::EC2::InternetGateway'
    Properties:
      Tags:
      - Key: Name
        Value: IGW-ONPREM
  InternetGatewayAttachment:
    Type: 'AWS::EC2::VPCGatewayAttachment'
    Properties:
      VpcId: !Ref OnPremVPC1
      InternetGatewayId: !Ref OnPremInternetGateway
  Pub:
    Type: AWS::EC2::Subnet
    Properties:
      MapPublicIpOnLaunch: true
      VpcId: !Ref OnPremVPC1
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      CidrBlock: !FindInMap [ Network, Settings, SubnetPubOnPrem1 ]
      Tags:
        - Key: Name
          Value: ONPREM-PUBLIC
  Priv1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref OnPremVPC1
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      CidrBlock: !FindInMap [ Network, Settings, SubnetPrivOnPrem1 ]
      Tags:
        - Key: Name
          Value: ONPREM-PRIVATE-1
  Priv2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref OnPremVPC1
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      CidrBlock: !FindInMap [ Network, Settings, SubnetPrivOnPrem2 ]
      Tags:
        - Key: Name
          Value: ONPREM-PRIVATE-2
  PrivateRT1: 
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref OnPremVPC1
      Tags:
      - Key: Name
        Value: ONPREM-PRIVATE-RT1
  PrivateRT2: 
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref OnPremVPC1
      Tags:
      - Key: Name
        Value: ONPREM-PRIVATE-RT2
  PublicRT: 
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref OnPremVPC1
      Tags:
      - Key: Name
        Value: ONPREM-PUBLIC-RT
  RouteDefaultIPV4Pub: 
    Type: 'AWS::EC2::Route'
    DependsOn: InternetGatewayAttachment
    Properties:
      RouteTableId:
        Ref: PublicRT
      DestinationCidrBlock: '0.0.0.0/0'
      GatewayId:
        Ref: OnPremInternetGateway
  Route1AWSIPv4:
    Type: 'AWS::EC2::Route'
    Properties:
      RouteTableId:
        Ref: PrivateRT1
      DestinationCidrBlock: '10.16.0.0/16'
      NetworkInterfaceId: !Ref ENIR1PRIVATE
  Route2AWSIPv4:
    Type: 'AWS::EC2::Route'
    Properties:
      RouteTableId:
        Ref: PrivateRT2
      DestinationCidrBlock: '10.16.0.0/16'
      NetworkInterfaceId: !Ref ENIR2PRIVATE
  RTOnPremPriv1:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref Priv1
      RouteTableId:
        Ref: PrivateRT1
  RTOnPremPriv2:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref Priv2
      RouteTableId:
        Ref: PrivateRT2
  RTOnPremPub:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref Pub
      RouteTableId:
        Ref: PublicRT
  Router1:
    Type: AWS::EC2::Instance
    DependsOn: 
      - ssmVPCe
      - ssmec2messagesVPCe
      - ssmmessagesVPCe
    Properties:
      InstanceType: "t3.small"
      ImageId: "ami-0ac80df6eff0e70b5"
      SubnetId: !Ref Pub
      SecurityGroupIds: 
        - !Ref InstanceSGOnPrem1
      IamInstanceProfile: !Ref EC2InstanceProfile
      SourceDestCheck: "false"
      Tags:
        - Key: Name
          Value: ONPREM-ROUTER1
      UserData:
        Fn::Base64: !Sub |
            #!/bin/bash -xe
            apt-get update && apt-get install -y strongswan wget
            mkdir /home/ubuntu/demo_assets
            cd /home/ubuntu/demo_assets
            wget https://raw.githubusercontent.com/acantril/learn-cantrill-io-labs/master/AWS_HYBRID_AdvancedVPN/OnPremRouter1/ipsec-vti.sh
            wget https://raw.githubusercontent.com/acantril/learn-cantrill-io-labs/master/AWS_HYBRID_AdvancedVPN/OnPremRouter1/ipsec.conf
            wget https://raw.githubusercontent.com/acantril/learn-cantrill-io-labs/master/AWS_HYBRID_AdvancedVPN/OnPremRouter1/ipsec.secrets
            wget https://raw.githubusercontent.com/acantril/learn-cantrill-io-labs/master/AWS_HYBRID_AdvancedVPN/OnPremRouter1/51-eth1.yaml
            wget https://raw.githubusercontent.com/acantril/learn-cantrill-io-labs/master/AWS_HYBRID_AdvancedVPN/OnPremRouter1/ffrouting-install.sh
            chown ubuntu:ubuntu /home/ubuntu/demo_assets -R
            cp /home/ubuntu/demo_assets/51-eth1.yaml /etc/netplan
            netplan --debug apply
  ENIR1PRIVATE:
    Type: AWS::EC2::NetworkInterface
    Properties:
      SubnetId: !Ref Priv1
      Description: Router1 PRIVATE INTERFACE
      GroupSet: 
      - !Ref InstanceSGOnPrem1
      SourceDestCheck: false
      Tags:
        -
          Key: Name
          Value: ONPREM-R1-PRIVATE
  ENIAttachmentRouter11:
    Type: AWS::EC2::NetworkInterfaceAttachment
    Properties:
        InstanceId:
          Ref: Router1
        NetworkInterfaceId:
          Ref: ENIR1PRIVATE
        DeviceIndex: 1
  Router2:
    Type: AWS::EC2::Instance
    DependsOn: 
      - ssmVPCe
      - ssmec2messagesVPCe
      - ssmmessagesVPCe
    Properties:
      InstanceType: "t3.small"
      ImageId: "ami-0ac80df6eff0e70b5"
      SubnetId: !Ref Pub
      SecurityGroupIds: 
        - !Ref InstanceSGOnPrem1
      IamInstanceProfile: !Ref EC2InstanceProfile
      SourceDestCheck: "false"
      Tags:
        - Key: Name
          Value: ONPREM-ROUTER2
      UserData:
        Fn::Base64: !Sub |
            #!/bin/bash -xe
            apt-get update && apt-get install -y strongswan wget
            mkdir /home/ubuntu/demo_assets
            cd /home/ubuntu/demo_assets
            wget https://raw.githubusercontent.com/acantril/learn-cantrill-io-labs/master/AWS_HYBRID_AdvancedVPN/OnPremRouter2/ipsec-vti.sh
            wget https://raw.githubusercontent.com/acantril/learn-cantrill-io-labs/master/AWS_HYBRID_AdvancedVPN/OnPremRouter2/ipsec.conf
            wget https://raw.githubusercontent.com/acantril/learn-cantrill-io-labs/master/AWS_HYBRID_AdvancedVPN/OnPremRouter2/ipsec.secrets
            wget https://raw.githubusercontent.com/acantril/learn-cantrill-io-labs/master/AWS_HYBRID_AdvancedVPN/OnPremRouter2/51-eth1.yaml
            wget https://raw.githubusercontent.com/acantril/learn-cantrill-io-labs/master/AWS_HYBRID_AdvancedVPN/OnPremRouter2/ffrouting-install.sh
            chown ubuntu:ubuntu /home/ubuntu/demo_assets -R
            cp /home/ubuntu/demo_assets/51-eth1.yaml /etc/netplan
            netplan --debug apply
  ENIR2PRIVATE:
    Type: AWS::EC2::NetworkInterface
    Properties:
      SubnetId: !Ref Priv2
      Description: Router2 PRIVATE INTERFACE
      GroupSet: 
      - !Ref InstanceSGOnPrem1
      SourceDestCheck: false
      Tags:
        -
          Key: Name
          Value: ONPREM-R2-PRIVATE
  ENIAttachmentRouter21:
    Type: AWS::EC2::NetworkInterfaceAttachment
    Properties:
        InstanceId:
          Ref: Router2
        NetworkInterfaceId:
          Ref: ENIR2PRIVATE
        DeviceIndex: 1
  ONPREMSERVER1:
    Type: AWS::EC2::Instance
    DependsOn: 
      - ssmVPCe
      - ssmec2messagesVPCe
      - ssmmessagesVPCe
    Properties:
      InstanceType: "t2.micro"
      ImageId: !Ref LatestAmiId
      IamInstanceProfile: !Ref EC2InstanceProfile
      SubnetId: !Ref Priv1
      SecurityGroupIds: 
        - !Ref InstanceSGOnPrem1
      Tags:
        - Key: Name
          Value: ONPREM-SERVER1
  ONPREMSERVER2:
    Type: AWS::EC2::Instance
    DependsOn: 
      - ssmVPCe
      - ssmec2messagesVPCe
      - ssmmessagesVPCe
    Properties:
      InstanceType: "t2.micro"
      ImageId: !Ref LatestAmiId
      IamInstanceProfile: !Ref EC2InstanceProfile
      SubnetId: !Ref Priv2
      SecurityGroupIds: 
        - !Ref InstanceSGOnPrem1
      Tags:
        - Key: Name
          Value: ONPREM-SERVER2
  EC2Role:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
              - ec2.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Path: /
      Policies:
        - PolicyName: root
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action: 
                  - 'ssm:DescribeAssociation'
                  - 'ssm:GetDeployablePatchSnapshotForInstance'
                  - 'ssm:GetDocument'
                  - 'ssm:DescribeDocument'
                  - 'ssm:GetManifest'
                  - 'ssm:GetParameter'
                  - 'ssm:GetParameters'
                  - 'ssm:ListAssociations'
                  - 'ssm:ListInstanceAssociations'
                  - 'ssm:PutInventory'
                  - 'ssm:PutComplianceItems'
                  - 'ssm:PutConfigurePackageResult'
                  - 'ssm:UpdateAssociationStatus'
                  - 'ssm:UpdateInstanceAssociationStatus'
                  - 'ssm:UpdateInstanceInformation'
                Resource: '*'
              - Effect: Allow
                Action:
                  - 'ssmmessages:CreateControlChannel'
                  - 'ssmmessages:CreateDataChannel'
                  - 'ssmmessages:OpenControlChannel'
                  - 'ssmmessages:OpenDataChannel' 
                Resource: '*'
              - Effect: Allow
                Action: 
                  - 'ec2messages:AcknowledgeMessage'
                  - 'ec2messages:DeleteMessage'
                  - 'ec2messages:FailMessage'
                  - 'ec2messages:GetEndpoint'
                  - 'ec2messages:GetMessages'
                  - 'ec2messages:SendReply'
                Resource: '*'
              - Effect: Allow
                Action:
                  - 's3:*'
                Resource: '*'
              - Effect: Allow
                Action:
                  - 'sns:*'
                Resource: '*'
  EC2InstanceProfile:
    Type: 'AWS::IAM::InstanceProfile'
    Properties:
      Path: /
      Roles:
        - !Ref EC2Role
  InstanceSGOnPrem1:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      VpcId: !Ref OnPremVPC1
      GroupDescription: Default ONPREM SG
      SecurityGroupIngress: 
        - Description: 'Allow All from AWS Environment'
          IpProtocol: '-1'
          CidrIp: '10.16.0.0/16'
  InstanceSGSelfReferenceRule:
    Type: "AWS::EC2::SecurityGroupIngress"
    Properties:
      GroupId: !Ref InstanceSGOnPrem1
      IpProtocol: '-1'
      SourceSecurityGroupId: !Ref InstanceSGOnPrem1
  ssmVPCe:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      VpcEndpointType: "Interface"
      PrivateDnsEnabled: "True"
      SubnetIds:
        - !Ref Pub
      SecurityGroupIds:
        - !Ref InstanceSGOnPrem1
      ServiceName: !Sub com.amazonaws.${AWS::Region}.ssm
      VpcId: !Ref OnPremVPC1
  ssmec2messagesVPCe:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      VpcEndpointType: "Interface"
      PrivateDnsEnabled: "True"
      SubnetIds:
        - !Ref Pub
      SecurityGroupIds:
        - !Ref InstanceSGOnPrem1
      ServiceName: !Sub com.amazonaws.${AWS::Region}.ec2messages
      VpcId: !Ref OnPremVPC1
  ssmmessagesVPCe:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      VpcEndpointType: "Interface"
      PrivateDnsEnabled: "True"
      SubnetIds:
        - !Ref Pub
      SecurityGroupIds:
        - !Ref InstanceSGOnPrem1
      ServiceName: !Sub com.amazonaws.${AWS::Region}.ssmmessages
      VpcId: !Ref OnPremVPC1
  s3VPCe:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      RouteTableIds:
        - !Ref PublicRT
        - !Ref PrivateRT1
        - !Ref PrivateRT2
      ServiceName: !Sub com.amazonaws.${AWS::Region}.s3
      VpcId: !Ref OnPremVPC1
Outputs:
  Router1Public:
    Description: Public IP of Router1
    Value: !GetAtt Router1.PublicIp
  Router2Public:
    Description: Public IP of Router2
    Value: !GetAtt Router2.PublicIp
  Router1Private:
    Description: Private IP of Router1
    Value: !GetAtt Router1.PrivateIp
  Router2Private:
    Description: Private IP of Router2
    Value: !GetAtt Router2.PrivateIp          
# OUTPUTS
Outputs:
  PUBLICIPEC2A2:
    Description: EC2A2 Public IP
    Value: !GetAtt EC2A2.PublicIp
  PUBLICIPEC2B2:
    Description: EC2B2 Public IP
    Value: !GetAtt EC2B2.PublicIp  
  ALBURL:
    Description: The Load Balancer URL
    Value: !Sub 'http://${ALB.DNSName}'     

  