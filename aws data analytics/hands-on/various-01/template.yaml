AWSTemplateFormatVersion: 2010-09-09
Description:  AWS Playground - Networking and Hybrid
Metadata:
  LICENSE: Apache License Version 2.0
Mappings:
  Network:
    Settings:
      VpcCidr1: '10.16.0.0/17'
      SubnetPrivA1: '10.16.0.0/19'
      SubnetPrivB1: '10.16.32.0/19'
      SubnetPubA1: '10.16.64.0/19'
      SubnetPubB1: '10.16.96.0/19'
      VpcCidr2: '10.16.128.0/17'
      SubnetPrivA2: '10.16.128.0/19'
      SubnetPrivB2: '10.16.160.0/19'
      SubnetPubA2: '10.16.192.0/19'
      SubnetPubB2: '10.16.224.0/19'
Parameters:
  LatestAmiId:
    Description: AMI for Bastion Host (default is latest AmaLinux2)
    Type: 'AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>'
    Default: '/aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-gp2'       
Resources:
  # VPC1 Resources
  VPC1:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !FindInMap [ Network, Settings, VpcCidr1 ]
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: VPC1
  IGW1:
    Type: 'AWS::EC2::InternetGateway'
    Properties:
      Tags:
      - Key: Name
        Value: awsIGW1
  IGWATT1:
    Type: 'AWS::EC2::VPCGatewayAttachment'
    Properties:
      VpcId: !Ref VPC1
      InternetGatewayId: !Ref IGW1
  PBRT1: 
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref VPC1
      Tags:
      - Key: Name
        Value: PBRT1
  PRRT1: 
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref VPC1
      Tags:
      - Key: Name
        Value: PRRT1
  PBROUTE1: 
    Type: 'AWS::EC2::Route'
    DependsOn: IGWATT1
    Properties:
      RouteTableId:
        Ref: PBRT1
      DestinationCidrBlock: '0.0.0.0/0'
      GatewayId:
        Ref: IGW1
  PBSUB1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC1
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      CidrBlock: !FindInMap [ Network, Settings, SubnetPubA1 ]
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: PBSUB1
  PBSUB2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC1
      AvailabilityZone: !Select [ 1, !GetAZs '' ]
      CidrBlock: !FindInMap [ Network, Settings, SubnetPubB1 ]
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: PBSUB2
  PRSUB1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC1
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      CidrBlock: !FindInMap [ Network, Settings, SubnetPrivA1 ]
      Tags:
        - Key: Name
          Value: PRSUB1
  PRSUB2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC1
      AvailabilityZone: !Select [ 1, !GetAZs '' ]
      CidrBlock: !FindInMap [ Network, Settings, SubnetPrivB1 ]
      Tags:
        - Key: Name
          Value: PRSUB2
  PBRTASS1:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref PBSUB1
      RouteTableId:
        Ref: PBRT1
  PBRTASS1:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref PBSUB2
      RouteTableId:
        Ref: PBRT1
  PRRTASS1:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref PRSUB1
      RouteTableId:
        Ref: PRRT1
  PRRTASS2:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref PRSUB1
      RouteTableId:
        Ref: PRRT1
  #PrivateS3 Buckets
  PKBUCKETPRS31:
    Type: AWS::S3::Bucket
  PKBUCKETPBS31:
    Type: AWS::S3::Bucket
  SG1:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      VpcId: !Ref VPC1
      GroupDescription: Enable SSH access via port 22 IPv4 & v6
      SecurityGroupIngress: 
        - Description: 'Allow SSH IPv4 IN'
          IpProtocol: tcp
          FromPort: '22'
          ToPort: '22'
          CidrIp: '0.0.0.0/0'
        - Description: 'Allow HTTP IPv4 IN'
          IpProtocol: tcp
          FromPort: '80'
          ToPort: '80'
          CidrIp: '0.0.0.0/0'
        - Description: 'Allow SSH IPv6 IN'
          IpProtocol: tcp
          FromPort: '22'
          ToPort: '22'
          CidrIpv6: ::/0
  SGINGRESS1:
    Type: "AWS::EC2::SecurityGroupIngress"
    Properties:
      GroupId: !Ref SG1
      IpProtocol: 'tcp'
      FromPort: '0'
      ToPort: '65535'
      SourceSecurityGroupId: !Ref SG1
  PREC2A:
    Type: AWS::EC2::Instance
    DependsOn: 
      - IFENDPOINT1
      - IFENDPOINT2
      - IFENDPOINT3
    Properties:
      InstanceType: "t2.micro"
      ImageId: !Ref LatestAmiId
      IamInstanceProfile: !Ref EC2InstanceProfile
      SubnetId: !Ref PRSUB1
      SecurityGroupIds: 
        - !Ref SG1
      Tags:
        - Key: Name
          Value: PREC2A
  EC2Role:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
              - ec2.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Path: /
      Policies:
        - PolicyName: root
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action: 
                  - 'ssm:DescribeAssociation'
                  - 'ssm:GetDeployablePatchSnapshotForInstance'
                  - 'ssm:GetDocument'
                  - 'ssm:DescribeDocument'
                  - 'ssm:GetManifest'
                  - 'ssm:GetParameter'
                  - 'ssm:GetParameters'
                  - 'ssm:ListAssociations'
                  - 'ssm:ListInstanceAssociations'
                  - 'ssm:PutInventory'
                  - 'ssm:PutComplianceItems'
                  - 'ssm:PutConfigurePackageResult'
                  - 'ssm:UpdateAssociationStatus'
                  - 'ssm:UpdateInstanceAssociationStatus'
                  - 'ssm:UpdateInstanceInformation'
                Resource: '*'
              - Effect: Allow
                Action:
                  - 'ssmmessages:CreateControlChannel'
                  - 'ssmmessages:CreateDataChannel'
                  - 'ssmmessages:OpenControlChannel'
                  - 'ssmmessages:OpenDataChannel' 
                Resource: '*'
              - Effect: Allow
                Action: 
                  - 'ec2messages:AcknowledgeMessage'
                  - 'ec2messages:DeleteMessage'
                  - 'ec2messages:FailMessage'
                  - 'ec2messages:GetEndpoint'
                  - 'ec2messages:GetMessages'
                  - 'ec2messages:SendReply'
                Resource: '*'
              - Effect: Allow
                Action:
                  - 's3:*'
                Resource: '*'
  EC2InstanceProfile:
    Type: 'AWS::IAM::InstanceProfile'
    Properties:
      Path: /
      Roles:
        - !Ref EC2Role
  # For SSM
  IFENDPOINT1:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      VpcEndpointType: "Interface"
      PrivateDnsEnabled: "True"
      SubnetIds:
        - !Ref PRSUB1
        - !Ref PRSUB2
      SecurityGroupIds:
        - !Ref SG1
      ServiceName: !Sub com.amazonaws.${AWS::Region}.ssm
      VpcId: !Ref VPC1
  # For SSM    
  # This endpoint is required to send and receive commands.    
  IFENDPOINT2:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      VpcEndpointType: "Interface"
      PrivateDnsEnabled: "True"
      SubnetIds:
        - !Ref PRSUB1
        - !Ref PRSUB2
      SecurityGroupIds:
        - !Ref SG1
      ServiceName: !Sub com.amazonaws.${AWS::Region}.ec2messages
      VpcId: !Ref VPC1
  # For SSM
  # Systems Manager uses the ssmmessages endpoint to make calls from SSM Agent to the Session Manager service in the cloud.
  # This endpoint is required to create and delete session channels with the Session Manager service in the cloud. 
  IFENDPOINT3:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      VpcEndpointType: "Interface"
      PrivateDnsEnabled: "True"
      SubnetIds:
        - !Ref PRSUB1
        - !Ref PRSUB2
      SecurityGroupIds:
        - !Ref SG1
      ServiceName: !Sub com.amazonaws.${AWS::Region}.ssmmessages
      VpcId: !Ref VPC1
  # Gateway Endpoint to access S3 or DynamoDB    
  GWENDPOINT:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      RouteTableIds:
        - !Ref PRRT1
        - !Ref PBRT1
      ServiceName: !Sub com.amazonaws.${AWS::Region}.s3
      VpcId: !Ref VPC1
# OUTPUTS
Outputs:
  PrivateBucketName:
    Value: !Ref PKBUCKETPRS31
    Description: Name of the sample Amazon S3 bucket with CORS enabled.
  PublicBucketName:
    Value: !Ref PKBUCKETPBS31
    Description: Name of the sample Amazon S3 bucket with CORS enabled.

  
  


             
